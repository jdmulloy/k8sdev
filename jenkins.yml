master:
  runAsUser: 1000 # dont run Jenkins as root
  fsGroup: 1000 # dont run Jenkins as root
  adminUser: "admin"
  adminPassword: admin

  # The node provisioner args ensure Jenkins doesn't wait forever to start new agents. By default it leans toward preserving resources
  # instead of spinning up new nodes.  Since we are running all our jobs in k8s we want it to spin them up quickly, and be less
  # afraid of over provisioning.
  javaOpts: '-Xmx512m -XshowSettings:vm -Dhudson.slaves.NodeProvisioner.initialDelay=0 -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85'
  
  jenkinsUrl: "http://k8s.local/jenkins"
  jenkinsUriPrefix: "/jenkins"

  # You still want some executors even if you aren't using them much. Remove this if you want to wait multiple minutes for your
  # builds to start
  numExecutors: 10 
  
  ingress:
    enabled: true
    hostName: k8s.local
    path: /jenkins


  # Setting this to ClusterIP means to reach our Jenkins from outside the cluster
  # we will need to provide an ingress.
  serviceType: "ClusterIP" 
  
  # Enable to always override the installed plugins with the values of 'master.installPlugins' on upgrade or redeployment.
  overwritePlugins: true
    # List of plugins to be install during Jenkins master start
  installPlugins:
    - kubernetes:1.18.1
    - workflow-job:2.33
    - workflow-aggregator:2.6
    - credentials-binding:1.20
    - git:3.11.0
    - job-dsl:1.74
    # if you update this, update plugin version below
    - configuration-as-code:1.27
    - blueocean:1.18.1
    - groovy:2.2
  JCasC:
    enabled: true
    # configuration-as-code version from above
    pluginVersion: "1.27"
    configScripts:
      # If you want to overwrite the message it has to be done in this JCasC script because
      # it is defined in the default values.yml for the chart.
      welcome-message: |
        jenkins:
          systemMessage: Welcome to our CI\CD server.  This Jenkins is configured and managed 'as code'.
      germinate: |
        unclassified:
          gitscm:
            globalConfigName: jenkins
            globalConfigEmail: jenkins@domain.local
            createAccountBasedOnEmail: false
        jobs:
          - script: >
              job('Seed Job') {
                  scm {
                      git('git://github.com/coryleeio/testdsl.git')
                  }
                  triggers {
                      scm('H/15 * * * *')
                  }
                  steps {
                      dsl {
                          external('*.groovy')
                          removeAction('DELETE')
                      }
                  }
              }
  initScripts:
   - |
         import com.cloudbees.plugins.credentials.impl.*;
         import com.cloudbees.plugins.credentials.*;
         import com.cloudbees.plugins.credentials.domains.*;
         import com.cloudbees.hudson.plugins.folder.*
         import org.jenkinsci.plugins.workflow.job.WorkflowJob
         import jenkins.model.Jenkins


         // FOLDERS
         Jenkins jenkins = Jenkins.instance // saves some typing

         if (jenkins.getItem("project-a") == null) {
           // Create the folder if it doesn't exist or if no existing job has the same name
           jenkins.createProject(Folder.class, "project-a")
         }

         if (jenkins.getItem("project-b") == null) {
           // Create the folder if it doesn't exist or if no existing job has the same name
           jenkins.createProject(Folder.class, "project-b")
         }


         // SECRETS
         String keyfile = "/tmp/key"

         Credentials c = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL,java.util.UUID.randomUUID().toString(), "description", "user", "password")


         def ksm1 = new CertificateCredentialsImpl.FileOnMasterKeyStoreSource(keyfile)
         Credentials ck1 = new CertificateCredentialsImpl(CredentialsScope.GLOBAL,java.util.UUID.randomUUID().toString(), "description", "password", ksm1)

         def ksm2 = new CertificateCredentialsImpl.UploadedKeyStoreSource(keyfile)
         Credentials ck2 = new CertificateCredentialsImpl(CredentialsScope.GLOBAL,java.util.UUID.randomUUID().toString(), "description", "password", ksm2)

         SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), c)
         SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), ck1)
         SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), ck2)
agent:
  enabled: true
  image: "jenkins/jnlp-slave"
  tag: "3.29-1-alpine"
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "1024Mi"